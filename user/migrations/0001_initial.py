# Generated by Django 2.1.2 on 2018-12-12 18:37

import django.contrib.auth.models
from django.db import migrations, models
import django.utils.timezone
import user.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('profile_image', models.TextField(blank=True)),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[user.models.MyValidator()], verbose_name='username')),
                ('bio', models.TextField(blank=True)),
                ('opt_in', models.BooleanField(default=False)),
                ('discord_url', models.CharField(blank=True, max_length=250)),
                ('twitter_url', models.CharField(blank=True, max_length=250)),
                ('twitch_url', models.CharField(blank=True, max_length=250)),
                ('youtube_url', models.CharField(blank=True, max_length=250)),
                ('primary_race', models.CharField(blank=True, max_length=20)),
                ('primary_role', models.CharField(blank=True, max_length=20)),
                ('primary_class', models.CharField(blank=True, max_length=20)),
                ('secondary_race', models.CharField(blank=True, max_length=20)),
                ('secondary_role', models.CharField(blank=True, max_length=20)),
                ('secondary_class', models.CharField(blank=True, max_length=20)),
                ('profession', models.CharField(blank=True, max_length=20)),
                ('profession_specialization', models.CharField(blank=True, max_length=20)),
                ('experience_points', models.IntegerField(default=0)),
                ('guild_points', models.IntegerField(default=0)),
                ('is_leader', models.BooleanField(default=False)),
                ('is_advisor', models.BooleanField(default=False)),
                ('is_council', models.BooleanField(default=False)),
                ('is_general_officer', models.BooleanField(default=False)),
                ('is_officer', models.BooleanField(default=False)),
                ('is_senior_member', models.BooleanField(default=False)),
                ('is_junior_member', models.BooleanField(default=False)),
                ('is_recruit', models.BooleanField(default=False)),
                ('is_raid_leader', models.BooleanField(default=False)),
                ('is_banker', models.BooleanField(default=False)),
                ('is_recruiter', models.BooleanField(default=False)),
                ('is_class_lead', models.BooleanField(default=False)),
                ('is_crafter_lead', models.BooleanField(default=False)),
                ('can_create_article', models.BooleanField(default=False)),
                ('can_create_newsletter', models.BooleanField(default=False)),
                ('can_create_calendar_event', models.BooleanField(default=False)),
                ('can_create_galleries', models.BooleanField(default=False)),
                ('can_read_article', models.BooleanField(default=True)),
                ('can_read_newsletter', models.BooleanField(default=True)),
                ('can_read_calendar_event', models.BooleanField(default=True)),
                ('can_update_article', models.BooleanField(default=False)),
                ('can_update_newsletter', models.BooleanField(default=False)),
                ('can_update_calendar_event', models.BooleanField(default=False)),
                ('can_delete_article', models.BooleanField(default=False)),
                ('can_delete_newsletter', models.BooleanField(default=False)),
                ('can_delete_calendar_event', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
